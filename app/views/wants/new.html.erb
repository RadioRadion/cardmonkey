   <div class="container">

    <%= simple_form_for [current_user, @want] do |f| %>
      <%= f.input :name, input_html: { class: 'search' } %>
      <div class="nextForm"></div>
    <% end %>

    <ul class="suggestions">
      <li>Filter for a city</li>
      <li>or a state</li>
    </ul>

  </div>

<script>
  //Importation de la variable de ruby. raw permet d'éviter le soucis d'importation qui rajoute &quote à chaque entrée de l'array
 const uniqsName = <%= raw @uniqsName %>;
 const cards =  <%= raw @cards %>;

 let extensions = [];
// const cities = [];
// fetch(endpoint)
//   .then(blob => blob.json())
//   .then(data => cities.push(...data));

//Pour chaque extension on créé un champ select en plus, qu'on injecte ensuite dans le form final.
const wholeForm = () => {
  const form =[`<option value=''>--Please choose an extension--</option>`];
  extensions.map( (extension) => {
    form.push(`<option value='${extension}'>${extension}</option>`);
  });
  nextForm.innerHTML = (`<div class="form-group string optional want_extension">
    <label class="string optional" for="want_extension">Extension :</label>
    <select class="form-control string optional" name="want[extension]" id="want_extension">
      ${form}
    </select>
    <div class="form-group string optional want_foil">
      <label class="string optional" for="want_foil">Foil ? :</label>
      <select class="form-control string optional" name="want[foil]" id="want_foil">
        <option value='Indifférent'>Indifférent</option>
        <option value='Yes'>Yes</option>
        <option value='No'>No</option>
      </select>
    </div>
    <div class="form-group string optional want_quantity">
      <label class="string optional" for="want_quantity">Quantity :</label>
      <select class="form-control string optional" name="want[quantity]" id="want_quantity">
        <option value='1'>1</option>
        <option value='2'>2</option>
        <option value='3'>3</option>
      </select>
    </div>
    <div class="form-group string optional want_min_cond>
      <label class="string optional" for="want_min_cond">Condition Minimale :</label>
      <select class="form-control string optional" name="want[min_cond]" id="want_min_cond">
        <option value='Indifférent'>Indifférent</option>
        <option value='Mint'>Mint</option>
        <option value='Near Mint'>Near Mint</option>
        <option value='Excellent'>Excellent</option>
        <option value='Good'>Good</option>
        <option value='Light Played'>Light Played</option>
        <option value='Played'>Played</option>
        <option value='Poor'>Poor</option>
      </select>
    </div>
    <div class="form-group string optional want_language">
      <label class="string optional" for="want_language">Langage :</label>
       <select class="form-control string optional" name="want[language]" id="want_language">
        <option value='Indifférent'>Indifférent</option>
        <option value='Anglais'>Anglais</option>
        <option value='Français'>Français</option>
        <option value='Allemand'>Allemand</option>
        <option value='Italien'>Italien</option>
        <option value='Chinois - S'>Chinois - S</option>
        <option value='Japonais'>Japonais</option>
        <option value='Portugais'>Portugais</option>
        <option value='Russe'>Russe</option>
        <option value='Corréen'>Corréen</option>
        <option value='Chinois - T'>Chinois - T</option>
      </select>
    </div>
    <input type="submit" name="commit" value="Create Want" data-disable-with="Create Want">`);
}

//On rempli le input avec la card cliquable
//On dégage tout ce qui a dans la div suggestions
//on check dans toutes les cartes les match de name, dès qu'il y a un match, on ajoute l'extension appropriée
//On lance la dernière fonction qui permet d'afficher le reste du formulaire
function complete(name) {
  document.querySelector('.search').value = name;
  suggestions.innerHTML = "";
  let carte = name;
  cards.map ( (card) => {
  if (card[0] === carte)
    extensions.push(card[1]);
  });
  wholeForm();
}

//petite fonction classique pas méchante de filter avec un regexp
function findMatches(wordToMatch, uniqsName) {
  return uniqsName.filter(card => {
    const regex = new RegExp(wordToMatch, 'gi');
    return card.match(regex);
  });
}

//La fonction qui lance toutes les autres, dès qu'on appuie sur une touche de la barre de recherche
    //On choppe toutes les cartes qui matchent avec ce qui est tappé
    //On les ajoutent dans la div suggestions, avec un event onclick complete(card).
function displayMatches() {
  if (this.value.length > 1) {
    const matchArray = findMatches(this.value, uniqsName);
    const html = matchArray.map(card => {
      return `
        <li>
          <span class="name" onclick="complete('${card}')" >${card}</span>
        </li>
      `;
    }).join('');
    suggestions.innerHTML = html;
  }
}

const searchInput = document.querySelector('.search');
const suggestions = document.querySelector('.suggestions');
const nextForm = document.querySelector('.nextForm');


searchInput.addEventListener('change', displayMatches);
searchInput.addEventListener('keyup', displayMatches);


</script>
