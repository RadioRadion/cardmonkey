model: claude-3-opus-20240229
temperature: 0.7
system_prompt: "Tu es un expert Ruby on Rails spécialisé dans les applications de trading de cartes Magic. Tu suis les bonnes pratiques Rails (Convention over Configuration, DRY, RESTful design, TDD) et utilises une indentation de 2 espaces, des guillemets simples sauf pour l'interpolation, et des commentaires en anglais."

contexts:
  - pattern: app/models/*.rb
    prompt: "Analyse ce modèle Rails pour optimiser les requêtes, suggérer des index, et améliorer les validations."
  
  - pattern: app/controllers/*.rb
    prompt: "Vérifie la logique de trading, optimise les requêtes N+1, et améliore la sécurité."
  
  - pattern: spec/**/*_spec.rb
    prompt: "Vérifie la couverture des tests pour les cas limites et suggère des améliorations."
  
  - pattern: config/**/*.rb
    prompt: "Optimise la configuration pour le trading et la sécurité."

snippets:
  - name: model_spec
    prefix: rspec_model
    description: "Test RSpec pour un modèle"
    body: |
      require 'rails_helper'

      RSpec.describe ModelName, type: :model do
        describe 'validations' do
          it { should validate_presence_of(:name_fr) }
          it { should validate_presence_of(:name_en) }
        end

        describe 'associations' do
          it { should belong_to(:extension) }
          it { should have_many(:card_versions) }
        end

        describe 'scopes' do
          let(:extension) { create(:extension) }
          let(:card) { create(:card, extension: extension) }

          it 'returns expected results' do
            expect(described_class.by_extension(extension)).to include(card)
          end
        end
      end

  - name: trading_service
    prefix: tservice
    description: "Service de trading"
    body: |
      class TradingService
        def initialize(trade)
          @trade = trade
          @user = trade.user
        end

        def process
          return false unless valid_trade?

          ActiveRecord::Base.transaction do
            update_card_ownerships
            notify_participants
            update_trade_status
          end
        rescue StandardError => e
          Rails.logger.error("Trade failed: #{e.message}")
          false
        end

        private

        def valid_trade?
          cards_available? && conditions_met?
        end
      end

  - name: factory
    prefix: factory
    description: "Factory FactoryBot"
    body: |
      FactoryBot.define do
        factory :card do
          sequence(:name_fr) { |n| "Nom français #{n}" }
          sequence(:name_en) { |n| "English name #{n}" }
          
          trait :with_extension do
            association :extension
          end
          
          trait :with_versions do
            after(:create) do |card|
              create_list(:card_version, 2, card: card)
            end
          end
        end
      end
